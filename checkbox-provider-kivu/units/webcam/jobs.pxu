id: kivu-webcam/gstreamer_h264_webcam_encoding
category_id: kivu-webcam
plugin: shell
user: root
_summary: Encode H264 webcam video with gstreamer and capture GPU usage
depends: camera/detect
requires:
  executable.name == "gst-launch-1.0"
  executable.name == "intel_gpu_top"
  package.name == "gstreamer1.0-vaapi"
environ: GST_PLUGIN
command:
  # We want the validate VA-API features of chromium, so use VA drivers from chromium, not the host
  # For libva
  export LD_LIBRARY_PATH=/snap/chromium/current/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH
  # For VA backend driver (iHD, radeonsi, ..)
  export LIBVA_DRIVERS_PATH=/snap/chromium/current/usr/lib/x86_64-linux-gnu/dri/
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/gstreamer_raw_webcam_encoding_intel_gpu_top.json &
  gpu_top_pid=$!
  timeout 10 gst-launch-1.0 -v --gst-plugin-path="${GST_PLUGIN}" v4l2src ! videoconvert ! video/x-raw ! fakesink
  if [[ "$?" -ne 124 ]]; then
      echo "Error"
      exit 1
  fi
  kill -TERM ${gpu_top_pid} &> /dev/null || true
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/gstreamer_h264_webcam_encoding_intel_gpu_top.json &
  gpu_top_pid=$!
  timeout 10 gst-launch-1.0 -v --gst-plugin-path="${GST_PLUGIN}" v4l2src ! videoconvert ! video/x-raw ! vaapih264enc ! fakesink
  if [[ "$?" -ne 124 ]]; then
      echo "Error"
      exit 1
  fi
  kill -TERM ${gpu_top_pid} &> /dev/null || true
  compare_intel_gpu_top_json.py "${PLAINBOX_SESSION_SHARE}"/gstreamer_h264_webcam_encoding_intel_gpu_top.json "${PLAINBOX_SESSION_SHARE}"/gstreamer_raw_webcam_encoding_intel_gpu_top.json
_description:
  This test checks the GPU usage by gstreamer for camera stream.
  The test depends on the camera detect (camera/detect). The camera availibility
  can be set in the [manifest] section of the checkbox configuration (checkbox-launcher)

id: kivu-webcam/chromium_h264_webcam_encoding
category_id: kivu-webcam
plugin: shell
user: root
_summary: Encode H264 webcam video with chromium and capture GPU usage
depends:
  camera/detect
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
  executable.name == "intel_gpu_top"
command:
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/chromium_h264_webcam_encoding_disabled_intel_gpu_top.json &
  gpu_top_pid=$!
  sudo --preserve-env -u "${NORMAL_USER}" timeout 10 bash -c 'chromium --start-fullscreen \
                                                              --disable-features=VaapiVideoEncoder \
                                                              --use-fake-ui-for-media-stream \
                                                              --enable-logging=stderr 2>&1 \
                                                              file:///home/"${NORMAL_USER}"/checkbox-test-data/camera-streaming.html?encoding=h264 \
                                                              | tee "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_encoding_vaapi_disabled.log'
  if [[ "$?" -ne 124 ]]; then
      echo "Error : ret=$?"
      exit 1
  fi
  kill -TERM ${gpu_top_pid} &> /dev/null || true
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/chromium_h264_webcam_encoding_enabled_intel_gpu_top.json &
  gpu_top_pid=$!
  sudo --preserve-env -u "${NORMAL_USER}" timeout 10 bash -c 'chromium --start-fullscreen \
                                                              --use-fake-ui-for-media-stream \
                                                              --enable-logging=stderr 2>&1 \
                                                              file:///home/"${NORMAL_USER}"/checkbox-test-data/camera-streaming.html?encoding=h264 \
                                                              | tee "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_encoding_vaapi_enabled.log'
  if [[ "$?" -ne 124 ]]; then
      echo "Error : ret=$?"
      exit 1
  fi
  compare_intel_gpu_top_json.py "${PLAINBOX_SESSION_SHARE}"/chromium_h264_webcam_encoding_enabled_intel_gpu_top.json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_webcam_encoding_disabled_intel_gpu_top.json

id: kivu-webcam/chromium_h264_onecopy
category_id: kivu-webcam
plugin: shell
user: root
_summary: Encode H264 webcam video and check onecopy usage
depends:
  camera/detect
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
command:
  sudo --preserve-env -u "${NORMAL_USER}" timeout 10 bash -c 'chromium --start-fullscreen \
                                                              --use-fake-ui-for-media-stream \
                                                              --enable-logging=stderr 2>&1 \
                                                              file:///home/"${NORMAL_USER}"/checkbox-test-data/camera-streaming.html?encoding=h264 \
                                                              | tee "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_onecopy.log'
  if [[ "$?" -ne 124 ]]; then
      echo "Error : ret=$?"
      exit 1
  fi
  # capture two messages:
  # - Video capture works under the one-copy mode
  # - Video capture fallback to one-copy mode
  grep "one-copy mode" "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_onecopy.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
    echo "Failed: Could not detect use of V4L2CaptureDelegateGpuHelper or other errors ($ret_code)"
    exit 1
  fi
_description:
  This test checks the verbose log of chromium after playing the camera video
  stream. If the string "one-copy mode" is present in this log,
  we know that the onecopy strategy is active or zerocopy is not possible
  and fallback to onecopy mode.

id: kivu-webcam/chromium_h264_onecopy_energy
category_id: kivu-webcam
plugin: shell
user: root
_summary: Check power usage gain by one copy
depends:
  camera/detect
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
command:
  export TEST_DURATION=600
  export MIN_SAVING_PERCENT=10
  rapl-power-stat.py ${TEST_DURATION} > "${PLAINBOX_SESSION_SHARE}"/powersaving_stat_one_copy_disabled.txt &
  perf_pid=$!
  sleep 1
  ps -p ${perf_pid} &> /dev/null || exit 1
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${TEST_DURATION} bash -c 'chromium --start-fullscreen \
                                                              --use-fake-ui-for-media-stream \
                                                              --disable-video-capture-use-gpu-memory-buffer \
                                                              --enable-logging=stderr 2>&1 \
                                                              file:///home/"${NORMAL_USER}"/checkbox-test-data/camera-streaming.html?encoding=h264 \
                                                              | tee "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_onecopy.log'
  if [[ "$?" -ne 124 ]]; then
      echo "Error : ret=$?"
      exit 1
  fi
  rapl-power-stat.py ${TEST_DURATION} > "${PLAINBOX_SESSION_SHARE}"/powersaving_stat_one_copy_enabled.txt &
  perf_pid=$!
  sleep 1
  ps -p ${perf_pid} &> /dev/null || exit 1
  sudo --preserve-env -u "${NORMAL_USER}" timeout ${TEST_DURATION} bash -c 'chromium --start-fullscreen \
                                                              --use-fake-ui-for-media-stream \
                                                              --enable-logging=stderr 2>&1 \
                                                              file:///home/"${NORMAL_USER}"/checkbox-test-data/camera-streaming.html?encoding=h264 \
                                                              | tee "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_onecopy.log'
  if [[ "$?" -ne 124 ]]; then
      echo "Error : ret=$?"
      exit 1
  fi
  # check that we have at least 10% power saving gain
  compare_power_consumption.py "${PLAINBOX_SESSION_SHARE}"/powersaving_stat_one_copy_enabled.txt "${PLAINBOX_SESSION_SHARE}"/powersaving_stat_one_copy_disabled.txt ${MIN_SAVING_PERCENT}
_description:
  This test checks the verbose log of chromium after playing the camera video
  stream. If the string "one-copy mode" is present in this log,
  we know that the onecopy strategy is active or zerocopy is not possible
  and fallback to onecopy mode.


id: kivu-webcam/chromium_h264_zerocopy
category_id: kivu-webcam
plugin: shell
user: root
_summary: Encode H264 webcam video and check zerocopy usage
depends:
  camera/detect
  kivu-common/prepare-test-data
requires:
  snap.name == "chromium"
command:
  sudo --preserve-env -u "${NORMAL_USER}" timeout 10 bash -c 'chromium --start-fullscreen \
                                                              --use-fake-ui-for-media-stream \
                                                              --enable-logging=stderr 2>&1 \
                                                              --video-capture-use-gpu-memory-buffer --enable-native-gpu-memory-buffers \
                                                              --vmodule=*/video/linux/*=3,*/ui/gl/*=3,*/platform/wayland/*=3 \
                                                              file:///home/"${NORMAL_USER}"/checkbox-test-data/camera-streaming.html?encoding=h264 \
                                                              | tee "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_zerocopy.log'
  if [[ "$?" -ne 124 ]]; then
      echo "Error : ret=$?"
      exit 1
  fi
  grep "Video capture will work under the zero-copy mode" "${PLAINBOX_SESSION_SHARE}"/chromium_camera_stream_zerocopy.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
    echo "Failed: Could not detect use of V4L2CaptureDelegateGpuHelper or other errors ($ret_code)"
    exit 1
  fi
_description:
  This test checks the verbose log of chromium after playing the camera video
  stream. If the string "Video capture will work under the zero-copy mode" is present in this log,
  we know that the zerocopy strategy is active.


