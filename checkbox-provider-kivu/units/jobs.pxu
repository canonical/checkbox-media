id: kivu/vainfo
category_id: kivu
plugin: attachment
_summary: Attach content of vainfo
requires: executable.name == "vainfo"
command:
  vainfo

id: kivu/gstreamer_h264_encoding
category_id: kivu
plugin: shell
user: root
_summary: Encode H264 video with gstreamer and capture GPU usage
requires:
  executable.name == "gst-launch-1.0"
  executable.name == "intel_gpu_top"
environ: GST_PLUGIN
command:
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/gstreamer_h264_encoding_intel_gpu_top.json &
  timeout 10 gst-launch-1.0 --gst-plugin-path="${GST_PLUGIN}" videotestsrc ! video/x-raw,width=3840,height=2160 ! vaapih264enc ! fakesink
  if [[ "$?" -eq 124 ]]
  then
      echo "Test finished"
      exit 0
  else
      echo "Error"
      exit 1
  fi

id: kivu/gstreamer_h264_decoding
category_id: kivu
plugin: shell
user: root
_summary: Decode H264 video with gstreamer and capture GPU usage
requires:
  executable.name == "gst-launch-1.0"
  executable.name == "intel_gpu_top"
environ: GST_PLUGIN_PATH
command:
  gst-launch-1.0 --gst-plugin-path="${GST_PLUGIN}" -v playbin uri=file://"${PLAINBOX_PROVIDER_DATA}"/bbb_h264_2160p_60fps_extract.mp4 &
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/gstreamer_h264_decoding_intel_gpu_top.json
  if [[ "$?" -eq 124 ]]
  then
      echo "Test finished"
      exit 0
  else
      echo "Error"
      exit 1
  fi

id: kivu/check_gstreamer_h264_encoding
category_id: kivu
flags: simple
_summary: Check GPU is used when encoding a H264 video using gstreamer
depends:
  kivu/gstreamer_h264_encoding
command:
  parse_intel_gpu_top_json.py "${PLAINBOX_SESSION_SHARE}"/gstreamer_h264_encoding_intel_gpu_top.json

id: kivu/check_gstreamer_h264_decoding
category_id: kivu
flags: simple
_summary: Check GPU is used when decoding a H264 video using gstreamer
depends:
  kivu/gstreamer_h264_decoding
command:
  parse_intel_gpu_top_json.py "${PLAINBOX_SESSION_SHARE}"/gstreamer_h264_decoding_intel_gpu_top.json

id: kivu/chromium_hardware_compositing
category_id: kivu
flags: simple
user: root
_summary: Grab chrome://gpu url and inspect for HW compositor.
requires:
  executable.name == "ydotool"
  executable.name == "wl-paste"
  snap.name == "chromium"
#depends:
#  kivu-common/disable-screensaver
command:
  # Launch the chromium browser.
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  exec sudo --preserve-env -u "${NORMAL_USER}" timeout 30 \
    chromium \
    --start-maximized \
    --enable-logging=stderr \
    /home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html &> \
    "${PLAINBOX_SESSION_SHARE}"/chromium_hardware_compositing_browser.log &
  # Grab the contents from the browser
  copy_chrome_url_v0_ydo.sh chrome://gpu
  # Paste the clipboard
  wl-paste | tee "${PLAINBOX_SESSION_SHARE}"/chromium_hardware_compositing.log
  # If it says "Software only", we should fail the test.
  grep "Compositing: Software only." "${PLAINBOX_SESSION_SHARE}"/chromium_hardware_compositing.log
  if [[ "$?" -eq 1 ]] # No lines selected by grep?
  then
      echo "Test finished"
      exit 0
  fi
  echo "Lacks hardware compositing."
  exit 1

id: kivu/chromium_flags_check
category_id: kivu
flags: simple
user: root
_summary: Grab chrome://version url and inspect the flags.
requires:
  executable.name == "ydotool"
  executable.name == "wl-paste"
  snap.name == "chromium"
#depends:
#  kivu-common/disable-screensaver
command:
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  # Launch the chromium browser.
  exec sudo --preserve-env -u "${NORMAL_USER}" timeout 30 \
    chromium \
    --start-maximized \
    --enable-logging=stderr \
    /home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html &> \
    "${PLAINBOX_SESSION_SHARE}"/chromium_flags_check.log &
  # Grab the contents from the browser
  copy_chrome_url_v0_ydo.sh chrome://version
  # Paste the clipboard
  wl-paste | tee "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  # If it misses crucial flags, we fail the test.
  grep "enable-features=.*VaapiVideoDecoder" "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
      echo "VaapiVideoDecoder not enabled or other errors ($ret_code)."
      exit 1
  fi
  grep "enable-features=.*VaapiVideoEncoder" "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
      echo "VaapiVideoEncoder not enabled or other errors ($ret_code)."
      exit 1
  fi
  grep "enable-features=.*VaapiVideoDecodeLinuxGL" "${PLAINBOX_SESSION_SHARE}"/chromium_flags.log
  ret_code=$?
  if [[ "$ret_code" -ne 0 ]] # No lines selected by grep?
  then
      echo "VaapiVideoDecodeLinuxGL not enabled or other errors ($ret_code)."
      exit 1
  fi
  exit 0

id: kivu/chromium_h264_decoding
category_id: kivu
flags: simple
user: root
_summary: Play H264 video using Chromium (VAAPI enabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "intel_gpu_top"
  snap.name == "chromium"
command:
  # Gather GPU logs (JSON pseudo-format)
  timeout 30 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled_intel_gpu_top.json &
  # Play fullscreen looping video in Chromium
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  echo PLAINBOX_SESSION_SHARE "${PLAINBOX_SESSION_SHARE}"
  sudo --preserve-env -u "${NORMAL_USER}" timeout 30 \
    chromium \
    --start-fullscreen \
    --enable-logging=stderr \
    /home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html &> \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled.log
  sudo_result=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled.log
  if [[ "$sudo_result" -eq 124 ]]
  then
      echo "Test finished to timeout."
      exit 0
  else
      echo "Error. The sudo-timeout-chromium command returned $sudo_result"
      exit 1
  fi

id: kivu/chromium_h264_decoding_vaapi_disabled
category_id: kivu
flags: simple
user: root
_summary: Play H264 video using Chromium (VAAPI disabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "intel_gpu_top"
  snap.name == "chromium"
command:
  # Gather GPU logs (JSON pseudo-format)
  timeout 30 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_disabled_intel_gpu_top.json &
  # Play fullscreen looping video in Chromium (HW decoder feature disabled)
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  sudo --preserve-env -u "${NORMAL_USER}" timeout 30 \
    chromium \
    --start-fullscreen \
    --disable-features=VaapiVideoDecoder \
    --enable-logging=stderr \
    /home/"${NORMAL_USER}"/checkbox-test-data/h264-video.html &> \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_disabled.log
  sudo_result=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_disabled.log
  if [[ "$sudo_result" -eq 124 ]]
  then
      echo "Test finished to timeout."
      exit 0
  else
      echo "Error. The sudo-timeout-chromium command returned $sudo_result"
      exit 1
  fi

id: kivu/chromium_h264_decoding_no_embed
category_id: kivu
flags: simple
user: root
_summary: Play non-embedded H264 video using Chromium (VAAPI enabled)
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "intel_gpu_top"
  snap.name == "chromium"
command:
  echo XDG_SESSION_TYPE "${XDG_SESSION_TYPE}"
  # Play fullscreen looping video in Chromium
  sudo --preserve-env -u "${NORMAL_USER}" timeout 30 \
    chromium \
    --start-fullscreen \
    --enable-logging=stdout \
    /home/"${NORMAL_USER}"/checkbox-test-data/bbb_h264_2160p_60fps_extract.mp4 > \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_no_embed.log
  sudo_result=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_no_embed.log
  if [[ "$sudo_result" -eq 124 ]]
  then
      echo "Test finished"
      exit 0
  else
      echo "Error: $sudo_result"
      exit 1
  fi

id: kivu/check_chromium_hw_decoder
category_id: kivu
flags: simple
_summary: Make sure video was played in Chromium using a hardware decoder
depends:
  kivu/chromium_h264_decoding
command:
  parse_chromium_logs.py "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled.log

id: kivu/chromium_h264_encoding
category_id: kivu
flags: simple
user: root
_summary: Encode H264 stream from within Chromium (VAAPI enabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "intel_gpu_top"
  snap.name == "chromium"
command:
  # Gather GPU logs (JSON pseudo-format)
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled_intel_gpu_top.json &
  # Open video encoding page in Chromium
  sudo --preserve-env -u "${NORMAL_USER}" timeout 10 \
    chromium \
    --start-fullscreen \
    --enable-logging=stdout \
    file:///home/"${NORMAL_USER}"/checkbox-test-data/video-encoding.html?encoding=h264 > \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled.log
  sudo_retval=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled.log
  if [[ "$sudo_retval" -eq 124 ]]
  then
      echo "Test finished"
      exit 0
  else
      echo "Error: $sudo_retval"
      exit 1
  fi

id: kivu/chromium_h264_encoding_vaapi_disabled
category_id: kivu
flags: simple
user: root
_summary: Encode H264 stream from within Chromium (VAAPI disabled) and capture GPU usage
depends:
  kivu-common/prepare-test-data
requires:
  executable.name == "intel_gpu_top"
  snap.name == "chromium"
command:
  # Gather GPU logs (JSON pseudo-format)
  timeout 10 intel_gpu_top -J > "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled_intel_gpu_top.json &
  # Open video encoding page in Chromium
  # (HW decoder feature disabled)
  sudo --preserve-env -u "${NORMAL_USER}" timeout 10 \
    chromium \
    --start-fullscreen \
    --disable-features=VaapiVideoEncoder \
    --enable-logging=stdout file:///home/"${NORMAL_USER}"/checkbox-test-data/video-encoding.html?encoding=h264 > \
    "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled.log
  sudo_retval=$?
  cat "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled.log
  if [[ "$sudo_retval" -eq 124 ]]
  then
      echo "Test finished"
      exit 0
  else
      echo "Error: $sudo_retval"
      exit 1
  fi

#id: kivu/chromium_capture_logs_webrtc_broadcast
#category_id: kivu
#flags: simple
#command:
#  timeout 30 chromium --start-fullscreen --enable-logging=stderr 2>&1 http://localhost:4000/ | tee "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled.log &
#  sleep 1 &
#  pidstat 30 1 -uhlH -G .*chrom.* > "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled_pidstat.log
#
#id: kivu/chromium_capture_logs_webrtc_broadcast_vaapi_disabled
#category_id: kivu
#flags: simple
#command:
#  timeout 30 chromium --start-fullscreen --disable-features=VaapiVideoDecoder --enable-logging=stderr 2>&1 http://localhost:4000/ | tee "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled.log &
#  sleep 1 &
#  pidstat 30 1 -uhlH -G .*chrom.* > "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled_pidstat.log
#
#id: kivu/check_cpu_usage_logs_webrtc_broadcast
#category_id: kivu
#flags: simple
#_summary: Compare average CPU usage with/without hardware acceleration (WebRTC broadcast)
#depends:
#  kivu/chromium_capture_logs_webrtc_broadcast
#  kivu/chromium_capture_logs_webrtc_broadcast_vaapi_disabled
#command:
#  parse_pidstat_logs.py "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled_pidstat.log "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled_pidstat.log
#
#id: kivu/cpu_usage_attachment_webrtc_broadcast.json
#category_id: kivu
#plugin: attachment
#depends:
#  kivu/chromium_capture_logs_webrtc_broadcast
#  kivu/chromium_capture_logs_webrtc_broadcast_vaapi_disabled
#command:
#  parse_pidstat_logs.py --json "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_disabled_pidstat.log "${PLAINBOX_SESSION_SHARE}"/chromium_webrtc_broadcast_vaapi_enabled_pidstat.log

id: kivu/check_chromium_h264_decoding
category_id: kivu
flags: simple
_summary: Check average GPU usage (H264 video decoding on Chromium)
_description: Compare average GPU usage with/without hardware acceleration (H264 video decoding on Chromium)
depends:
  kivu/chromium_h264_decoding
  kivu/chromium_h264_decoding_vaapi_disabled
command:
  compare_intel_gpu_top_json.py "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled_intel_gpu_top.json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_disabled_intel_gpu_top.json

id: kivu/gpu_usage_attachment_chromium_h264_decoding.json
category_id: kivu
_summary: Attach GPU usage info (H264 video on Chromium)
plugin: attachment
depends:
  kivu/chromium_h264_decoding
  kivu/chromium_h264_decoding_vaapi_disabled
command:
  compare_intel_gpu_top_json.py --json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_enabled_intel_gpu_top.json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_decoding_vaapi_disabled_intel_gpu_top.json

id: kivu/check_chromium_h264_encoding
category_id: kivu
flags: simple
_summary: Check GPU usage (H264 video encoding on Chromium)
_description: Compare average GPU usage with/without hardware acceleration (H264 video encoding on Chromium)
depends:
  kivu/chromium_h264_encoding
  kivu/chromium_h264_encoding_vaapi_disabled
command:
  compare_intel_gpu_top_json.py "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled_intel_gpu_top.json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled_intel_gpu_top.json

id: kivu/gpu_usage_attachment_chromium_h264_encoding.json
category_id: kivu
_summary: Attach GPU usage info (H264 video on Chromium)
plugin: attachment
depends:
  kivu/chromium_h264_encoding
  kivu/chromium_h264_encoding_vaapi_disabled
command:
  compare_intel_gpu_top_json.py --json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_enabled_intel_gpu_top.json "${PLAINBOX_SESSION_SHARE}"/chromium_h264_encoding_vaapi_disabled_intel_gpu_top.json

